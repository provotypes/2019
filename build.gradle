plugins {
    id "java"
    id "edu.wpi.first.GradleRIO" version "2019.2.1"
}

def ROBOT_MAIN_CLASS = "frc.robot.Main"

// Define my targets (RoboRIO) and artifacts (deployable files)
// This is added by GradleRIO's backing project EmbeddedTools.
deploy {
    targets {
        roboRIO("roborio") {
            // Team number is loaded either from the .wpilib/wpilib_preferences.json
            // or from command line. If not found an exception will be thrown.
            // You can use getTeamOrDefault(team) instead of getTeamNumber if you
            // want to store a team number in this file.
            team = frc.getTeamNumber()
        }
    }
    artifacts {
        frcJavaArtifact('frcJava') {
            targets << "roborio"
            // Debug can be overridden by command line, for use with VSCode
            debug = frc.getDebugOrDefault(false)
        }
        // Built in artifact to deploy arbitrary files to the roboRIO.
        fileTreeArtifact('frcStaticFileDeploy') {
            // The directory below is the local directory to deploy
            files = fileTree(dir: 'src/main/deploy')
            // Deploy to RoboRIO target, into /home/lvuser/deploy
            targets << "roborio"
            directory = '/home/lvuser/deploy'
        }
    }
}

// Set this to true to enable desktop support.
def includeDesktopSupport = true

// Maven central needed for JUnit
repositories {
    mavenLocal()
    gradlePluginPortal()
    String frcYear = '2019'
    File frcHome
    if (org.gradle.internal.os.OperatingSystem.current().isWindows()) {
        String publicFolder = System.getenv('PUBLIC')
        if (publicFolder == null) {
            publicFolder = "C:\\Users\\Public"
        }
        frcHome = new File(publicFolder, "frc${frcYear}")
    } else {
        def userFolder = System.getProperty("user.home")
        frcHome = new File(userFolder, "frc${frcYear}")
    }
    def frcHomeMaven = new File(frcHome, 'maven')
    maven {
        name 'frcHome'
        url frcHomeMaven
    }
    maven {
        name 'revrobotics'
        url 'http://www.revrobotics.com/content/sw/max/sdk/maven/'
    }
    maven {
        name 'ctr-electronics'
        url 'http://devsite.ctr-electronics.com/maven/release/'
    }
    mavenCentral()
    jcenter()
}

// Defining my dependencies. In this case, WPILib (+ friends), and vendor libraries.
// Also defines JUnit 4.
dependencies {
    compile files('javafx.graphics.jar')
    compile wpi.deps.wpilib()
    compile wpi.deps.vendor.java()
    nativeZip wpi.deps.vendor.jni(wpi.platforms.roborio)
    nativeDesktopZip wpi.deps.vendor.jni(wpi.platforms.desktop)
    testCompile wpi.deps.wpilib()
    testCompile wpi.deps.vendor.java()
    testCompile 'junit:junit:4.12'
    testCompile "org.mockito:mockito-core:2.+"
}

// Setting up my Jar File. In this case, adding all libraries into the main jar ('fat jar')
// in order to make them all available at runtime. Also adding the manifest so WPILib
// knows where to look for our Robot Class.
jar {
    from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
    manifest edu.wpi.first.gradlerio.GradleRIOPlugin.javaManifest(ROBOT_MAIN_CLASS)
}


test {

}
